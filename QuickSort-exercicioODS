#include <stdio.h>
#include <stdlib.h>
#define QDEESTADOS 27

typedef struct _mort{
	char  estado[3];
	float mortes09;
	float mortes15;
	float indice;
} mortMaterna;
	

void quickSort(mortMaterna *vetor, int esq, int dir) {
  int i, j;
  int pivo;
  mortMaterna aux;

  i = esq;
  j = dir;
  pivo = (esq+dir)/2; //calculo o indice do elemento, e usa ele como pivo

  while (i <= j) {
    while(vetor[i].mortes15 < vetor[pivo].mortes15 && i <  dir)
      i++;

    while (vetor[j].mortes15 > vetor[pivo].mortes15 && j > esq) 
      j--;

    if (i <= j) {
      aux = vetor[i];
      vetor[i] = vetor[j];
      vetor[j] = aux;
      i++;
      j--;
    }
  }

  if (j > esq) 
    quickSort(vetor, esq, j);

  if (i < dir)
    quickSort(vetor, i, dir);

}


int main(){
	
	mortMaterna estados[QDEESTADOS];

	int i;

	for(i=0; i < QDEESTADOS; i++){
		scanf("%s %f %f", estados[i].estado, &estados[i].mortes09, &estados[i].mortes15);
		estados[i].indice = estados[i].mortes15 - estados[i].mortes09;
	}

	// chama a função que ordena os dados
	quickSort(estados, 0, QDEESTADOS-1);


	// exibe os dados ordenados no formato de tabela
	printf("\nDados ordenados por mortalidade em 2015\n");
	printf("Estado\t2009\t2015\tDiferenca\n");	
	for(i=0; i<QDEESTADOS; i++)
		printf("%s\t%.1f\t%.1f\t%.1f\n",estados[i].estado, estados[i].mortes09, estados[i].mortes15, estados[i].indice);
	
	return 0;
}
